---

name: Массивы только для чтения
theory: |

  В разработке на JavaScript с активным применением функций высшего порядка (map/filter/reduce и другие) массивы меняюся редко. Как правило вместо изменения существующих массивов, происходит создание новых. Технически JavaScript не может запретить изменение существующих массивов, поэтому вся ответственность на соблюдении этого правила лежит на программистах.

  В TypeScript работа с неизменяемыми массивами встроена в систему типов. Чтобы гарантировать неизменяемость, массив помечается модификатором `readonly`:

  ```typescript
  function process(numbers: readonly number[]) {
    numbers.push(1); // Error!
  }
  ```

  `readonly` запрещает изменение массива, но не запрещает изменение объектов, находящихся внутри массива:

  ```typescript
  const items: readonly ({ key: string })[] = [{ key: 'value'}];
  items[0].key = 'another value'; // ok!
  ```

  Модификатор `readonly`, сам по себе является синтаксическим сахаром. Технически, в случае массива `readonly` меняет тип `Array`, на тип `ReadonlyArray`. Код выше можно было бы записать так:

  ```typescript
  const items: ReadonlyArray<{ key: string }> = [{ key: 'value'}];
  ```

instructions: |

  Реализуйте функцию `reverse()`, которая переворачивает массив. Технически она должна возвращать новый массив, в котором элементи расположены в обратном порядке. Используйте модификатор `readonly` для входящего массива. Не используйте встроенный метод `reverse()`.

  ```typescript
  reverse([1, 2, 8]); // [8, 2, 1]
  reverse([10, 33, 7, 0]); // [0, 7, 33, 10]
  ```

# tips:
