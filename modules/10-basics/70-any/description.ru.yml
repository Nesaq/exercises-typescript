---

name: Тип Any
theory: |

  В TypeScript добавлен специальный тип `any`, который используется там, где проверка типов не нужна, либо, когда TypeScript не может вывести тип данных автоматически. Использование `any` превращает TypeScript в JavaScript, так как данные с таким типом перестают проверяться.

  ```typescript
  // В таком случае тип будет any[]
  const items = [];
  ```

  `any` полезен, например, при переводе проекта из JavaScript в TypeScript, когда сначала все типы объявляются как `any`, а затем понемногу переписываются на нужные.

  Кроме того, он нужен для работы с библиотеками JavaScript (у которых нет описанных типов) из TypeScript кода. В остальных случаях `any` нужно избегать, так как теряется весь смысл использования языка TypeScript.

  # JavaScript => TypeScript

  Возьмем для примера код, который считает количество слов в предложении:

  ```javascript
  const sentence = 'table cat table dog dog apple table';

  const words = sentence.split(' ');
  const result = words.reduce((acc, word) => {
    acc[word] = Object.hasOwn(acc, word) ? acc[word] + 1 : 1;
    return acc;
  }, {});
  // { table: 3, cat: 1, dog: 2, apple: 1 }
  ```

  Компилятор TypeScript такой код не пропустит, он укажет на то, что объект `{}` не содержит ключей со строковым типом

  ```
  No index signature with a parameter of type 'string' was found on type '{}'.
  4 acc[word] = Object.hasOwn(acc, word) ? acc[word] + 1 : 1;
  ```

  Почему так происходит? Структура объекта задает его тип во время определения и в процессе работы структура меняться не может. В коде же выше, изначально объект вообще пустой, а по мере работы он заполняется ключами динамически. Задавать правильно тип в ситуации с динамическими ключами мы научимся позже, а пока сделаем код рабочим с помощью `any`. Для этого нам надо определить объект с явным указанием типа:

  ```typescript
  const sentence = 'table cat table dog dog apple table';

  const words = sentence.split(' ');
  const initial: any = {}; // вынесли в переменную
  const result = words.reduce((acc, word) => {
    acc[word] = Object.hasOwn(acc, word) ? acc[word] + 1 : 1;
    return acc;
  }, initial);
  ```

  TypeScript больше не показывает ошибку компиляции, что с одной стороны хорошо, с другой, сама проверка допустимости действий над этим объектом отключена. Если в дальнейшем обратиться к несуществующему свойству в этом объекте, TypeScript не укажет на ошибку.


instructions: |

  Реализуйте функцию `getParams()`, которая принимает на вход строку запроса (query string) и возвращает параметры в виде объекта

  ```typescript
  getParams('per=10&page=5');
  // { per: 10, page: 5 }
  getParams('name=hexlet&count=3&order=asc');
  // { name: 'hexlet', count: 3, order: 'asc' }
  ```

  Эту задачу лучше всего решать через метод `reduce`

# tips:
