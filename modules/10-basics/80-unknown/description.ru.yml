---

name: Тип Unknown
theory: |

  Использование типа `any` в TypeScript не желательно. В наиболее строгом режиме (оно настраивается) использование `any` невозможно, что значительно повышает типобезопасность кода. С другой стороны, существует не мало ситуаций, когда тип не извествен, но работа с ним должна быть типобезопасна. Для этого в TypeScript существует дополнение к `any` называемое `unknown`.

  Главное отличие `unknown` от `any` связано с проверкой типов. `unknown` запрещает выполнять любые операции:

  ```typescript
  let value: unknown = 'code-basics';

  value.toUpperCase(); // Error!
  value.trim(); // Error!
  ```

  _Может показаться странным, что перед нами строка, но над ней нельзя выполнять строковые операции. К этому надо привыкнуть. Тип в статически типизированных языках определяется не тем, что мы видим своими глазами, а тем как тип выводится (автоматически или через явное указание)_

  Пример выше на практике смысла не имеет, но все меняется когда нам приходится создавать функцию, которая может работать с любым входящим типом. В JavaScript подобная практика достаточно распространена:

  ```typescript
  // Пример из lodash
  _.isError(new Error); // true
  _.isError(Error); // false
  _.isError('code-basics'); // false
  ```

  Подобную функцию можно реализовать с помощью `any`, но тогда придется быть очень аккуратным внутри и надеятся только на себя.

  ```typescript
  function isError(value: any)
  ```

  Лучше использовать `unknown`, тогда TypeScript защитит от потенциальных ошибок типов:

  ```typescript
  function isError(value: unknown)
  ```

  Затем, уже внутри тела можно выполнить нужную проверку, чтобы узнать с чем мы имеем дело:

  ```typescript
  function isError(value: unknown) {
    return value instanceof Error;
  }
  ```

instructions: |

  Реализуйте функцию `isPlainObject()`, которая проверяет, является ли переданное значение объектом. Эта функция считает что массив не объект.

  ```typescript
  isPlainObject(1); // false
  isPlainObject('hexlet'); // false
  isPlainObject({}); // true
  isPlainObject({ name: 'code-basics' }); // true
  isPlainObject([1, 8]); // false
  ```

# tips:
