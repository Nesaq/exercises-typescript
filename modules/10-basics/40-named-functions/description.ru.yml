---

name: Именованные функции
theory: |

  В определении переменных мы, обычно, не указываем тип этой переменной, он выводится автоматически. С функциями такой трюк не сработает, они требуют обязательного указания типов всех входных параметров:

  ```typescript
  function getGreetingPhrase(name: string) {
    return `Hello, ${name.toUpperCase()}!`;
  }
  ```

  При таком указании, параметр будет обязательным. Попытка вызвать функцию без параметра приведет к ошибке компиляции:

  ```typescript
  // Expected 1 arguments, but got 0.
  getGreetingPhrase();
  ```

  ## Необязательный параметр

  Чтобы сделать параметр необязательным, нужно добавить знак *?* после имени переменной:

  ```typescript
  function getGreetingPhrase(name?: string) {
    return `Hello, ${name ? name.toUpperCase() : 'Guest'}!`;
  }

  getGreetingPhrase('Mike'); // Hello, Mike!
  getGreetingPhrase(); // Hello, Guest!
  ```

  В таком случае тип переменной `name` становится составным (Union Type): `string | undefined`, что читается как "строка или undefined".

  Необязательный параметр может быть `undefined`, но не `null`. Для добавления `null` нужно изменить определение так:

  ```typescript
  function getGreetingPhrase(name?: string | null) {
    return `Hello, ${name ? name.toUpperCase() : 'Guest'}!`;
  }
  ```

  Здесь мы расширили определение типа переменной `name` до `string | undefined | null`.

  ## Значение по умолчанию

  Со значением по умолчанию ситуация проще. Здесь не нужно ничего дополнительно указывать, значение задается как в JavaScript, а сама переменная автоматически становится необязательной:

  ```typescript
  function getGreetingPhrase(name: string = 'Guest') {
    return `Hello, ${name.toUpperCase()}!`;
  }

  getGreetingPhrase() // Hello, Guest!
  ```

  ## Тип возвращаемого значения

  Во многих случаях, TypeScript выводит тип возвращаемого значения самостоятельно, но его можно указывать явно:

  ```typescript
  function getGreetingPhrase(name: string): string {
    return `Hello, ${name.toUpperCase()}!`;
  }
  ```

  Несмотря на то, что возвращаемый тип может выводиться, мы рекомендуем проставлять его всегда. Это упрощает документирование, защищает код от случайных изменений. К тому же существует немало ситуаций, где TypeScript хоть и выводит тип возвращаемого значения, но делает это [не так как нам хотелось бы](https://stackoverflow.com/questions/70001511/why-specify-function-return-types).

instructions: |

  Реализуйте функцию `getHiddenCard()`, которая принимает на вход номер кредитки (состоящий из 16 цифр) в виде строки и возвращает его скрытую версию, которая может использоваться на сайте для отображения. Если исходная карта имела номер *2034399002125581*,  то скрытая версия выглядит так *\*\*\*\*5581*. Другими словами, функция заменяет первые 12 символов, на звездочки. Количество звездочек регулируется вторым необязательным параметром. Значение по умолчанию — 4.

  ```typescript
  // Кредитка передается внутрь как строка
  getHiddenCard('1234567812345678', 2) // "**5678"
  getHiddenCard('1234567812345678', 3) // "***5678"
  getHiddenCard('1234567812345678')    // "****5678"
  getHiddenCard('2034399002121100', 1) // "*1100"
  ```

# tips:
#   - |
