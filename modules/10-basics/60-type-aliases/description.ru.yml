---

name: Псевдонимы Типов (Type Aliases)
theory: |

  Представьте себе программу, в которой есть объект пользователя, который используется повсеместно. В такой ситуации описание типа этого объекта будет повторяться из раза в раз в каждом определении функции. Во-первых здесь много дублирования, во-вторых значительно усложняется изменение структуры, так как придется руками править все места, где это определение встречается.

  Чтобы избежать подобных ситуаций, TypeScript позволяет задавать имя (алиас или псевдоним) для таких составных типов, чтобы не повторяться:

  ```javascript
  type User = {
    firstName: string;
    pointsCount: number;
  }
  ```

  Теперь можно провести замену во всех функциях:


  ```typescript
  function doSomething(user: User) {
    // ...
  }
  ```

  Алиас это не создание нового типа данных, а всего лишь способ сокращенно записать определение типа. Поэтому следующие примеры будут работать без проблем:

  ```typescript
  const user = {
    firstName: 'Mike',
    pointsCount: 1000,
  };

  // Оба вызова работают
  doSomething(user);
  doSomething({ firstName: 'Bob', pointsCount: 1800 });
  ```

  Несмотря на выше сказанное, разработчики на TypeScript говорят "создал тип", а не "создал алиас типа" или "создал псевдоним типа". Поэтому в этом курсе мы будем придерживаться общепринятого формата.

  Типы можно задавать для любых типов данных, от простых:

  ```typescript
  type SomeType = string;
  ```

  до составных:

  ```typescript
  // union тип из трех возможных значений
  type SomeType = string | number | null;

  // Функция
  type Countable = (coll: number[]) => number
  ```

  ## Объекты и функции

  Описание типа функции вне объекта и внутри отличается. Когда функция записывается самостоятельно, то используется формат стрелочной функции:

  ``typescript
  type Countable = (coll: number[]) => number
  ```

  Внутри типа описывающего объект формат меняется на такой же, который используется для обычных свойств:

  ```typescript
  type User = {
    firstName: string;
    pointsCount: number;
    count(coll: number[]): number;
  }
  ```

  Но это не касается колбеков, которые могут быть использованы внутри:

  ```typescript
  type User = {
    firstName: string;
    pointsCount: number;
    // Типы взяты для примера
    count(coll: (v: string) => string): number;
  }
  ```

instructions: |

  Реализуйте функцию `getOlderUser()`, которая принимает на вход двух пользователей и возвращает того, который старше. Если пользователи - ровесники, то возвращает `null`:

  ```typescript
  const user1 = { name: 'Petr', age: 8 };
  ```

  Определите для пользователя псевдоним, чтобы не дублировать определение его типа в параметрах функции.

# tips:
